 --      ======================================================================================     

--      Conversion summary
 
--      ====================================================================================== 
--      Revised visit_sales to ensure only one sale per sku taken into fitting room
--      Update 16/9/2023 v2
--      Updated to run from the new crave data tables via the view crave_visits_raw_vw

-- 		This code is for the weekly report which shows the performance of crave stores both for every week and year to date. 

-- 		This first CTE is to specify the timeframe that you are interested in so that you only have to enter in the week once rather than several times.  

with datetime as (

    select 
    
       sk_cal_dt,
       cal_dt,
       fin_yr_wk

    from published_data.dim_time dmt

    where  dmt.fin_yr_wk between 202317 and 202351 --For cumulative tab. Starting from week 35 because footfall data does not have all of the data for weeks 17 to 30
           --dmt.fin_yr_wk = 202351 -- For just week x tab
           --dmt.cal_dt = '2023-10-11'
),

-- Stores had crave installed at different times of the year. We only want sales from when the store had crave installed, not before. 

startdates as (

select location_id, 
       min(cvr.date)        start_date,
       datetime.cal_dt

from "RI_SANDL_DB"."RAW_DATA"."CRAVE_VISITS_RAW_VW" cvr

join datetime
on datetime.cal_dt = cvr.date

group by 

    location_id,
    datetime.cal_dt

order by 
    
    cvr.location_id,
    datetime.cal_dt

),

-- All the SKUs that were taken into the fitting room and subsequently sold. 

visit_transactions_by_sku as ( 
select    
        cvr.unique_shopper_id,
        cvr.date_and_time    start_time,
        cvr.dwell_time_msec,
        timestampadd('MINUTES', cvr.dwell_time_msec/ 60000, cvr.date_and_time) trans_end_time,
        convert_timezone('UTC' ,'Europe/London', start_time::timestamp_ntz) as start_local_time, -- we want the time to be in local time, not UTC

        
        dmo.location_id,
        dmo.location_descr,
        dps.sku_id,
        max(sal_qty)        sku_vis_sales_qty,
        max(sal_retail_val) sku_vis_sales_value

from 
        ri_ngbi_db.published_data.FTT_SAL_SKU_LOC_TRANS                                        fsslt
                        
                        join published_data.dim_product_sku                         dps 
                        on               fsslt.sk_sku_id = dps.sk_sku_id 
                        join datetime                                dmt    --joining the first CTE here so that timeframe does not have to be specified again. 
                        on         fsslt.sk_trans_cal_dt = dmt.sk_cal_dt
                        join published_data.dim_org                                 dmo           
                        on         fsslt.SK_location_ID = dmo.sk_location_id 
                        join ri_sandl_db.raw_data.crave_visits_raw_vw                  cvr
                        on         dps.sku_id = cvr.sku
                            and     dmo.location_id  = cvr.location_id
                            and     dmt.cal_dt = cvr.date
                            and     fsslt.pos_sale_dtm > cvr.date_and_time -- sale has to be after the visit to the changing room
    where        
                        fsslt.currency_id   = 'GBP'
                and     timediff('MINUTES',trans_end_time,fsslt.pos_sale_dtm  ) <15 -- no unique identifier to determine if the same customer who was in the fitting room bought the item, so putting a time frame of 15mins between the customer leaving the fitting room and purchasing the item.
                and     fsslt.sal_qty       > 0 -- (gross sales)

 
    group by
        cvr.unique_shopper_id,
        cvr.date_and_time,
        cvr.dwell_time_msec,
        dmo.location_id,
        dmo.location_descr,
        dps.sku_id
    
    order by
        dmo.location_id  
) ,

-- This table summarise the date from the previous CTE to store level.

visit_sales as(   
select
        location_id,
        location_descr,
        sum(sku_vis_sales_qty)             vis_sales_qty,
        sum(sku_vis_sales_value)           vis_sales_value
from
        visit_transactions_by_sku
group by
        location_id,
        location_descr  
) ,

-- Getting the total number of items bought by each customer who visits the fitting room. 

visit_transactions as(   
select
        unique_shopper_id,
        location_id,
        location_descr,
        sum(sku_vis_sales_qty)             vis_sales_qty,
        sum(sku_vis_sales_value)           vis_sales_value
from
        visit_transactions_by_sku
group by
        unique_shopper_id,
        location_id,
        location_descr   
)   ,

-- From the CTE above, what is the average number of items bought where the customer has been in the fitting room and what is the average value of this basket? 

visit_stats as (  
select
    location_id,
    location_descr,
    count(*)            converted_visits,
    avg(vis_sales_qty)  ave_units_sale_vis,
    avg(vis_sales_value) ave_vis_sales_value

from
    visit_transactions

group by
    location_id,
    location_descr
),

-- Finding the number of fitting room visits for each store so that capture rate can be calculated. 

visit_count as (
select    
        dmo.location_id,
        dmo.location_descr,
        count(distinct unique_shopper_id)        number_visits

from 

                        ri_sandl_db.raw_data.crave_visits_raw_vw                  cvr
                        
                join    ri_ngbi_db.published_data.dim_org                     dmo
                on      dmo.location_id  = cvr.location_id
                
                join datetime                                dmt    
                on   dmt.cal_dt = cvr.date
 
    group by
        dmo.location_id,
        dmo.location_descr
    
    order by
        dmo.location_id
),

-- How many customer requests from the fitting room result in a sale? Summarising to be by location

request_sales as (
select    
        dmo.location_id,
        dmo.location_descr,
        sum(sal_qty)        req_sales_qty,
        sum(sal_retail_val) req_sales_value

from 
        published_data.FTT_SAL_SKU_LOC_TRANS                                        fsslt
                        
                        join published_data.dim_product_sku                         dps 
                        on               fsslt.sk_sku_id = dps.sk_sku_id 
                        join datetime                                               dmt    
                        on         fsslt.sk_trans_cal_dt = dmt.sk_cal_dt
                        join published_data.dim_org                                 dmo           
                        on         fsslt.SK_location_ID = dmo.sk_location_id
                        join ri_sandl_db.raw_data.crave_requests_raw_vw             crr
                        on         dps.sku_id = crr.sku
                            and     dmo.location_id  = crr.location_id
                            and     dmt.cal_dt = crr.date
    where        
                        fsslt.currency_id   = 'GBP'
                and     timediff('MINUTES',crr.date_and_time,fsslt.pos_sale_dtm  ) <30
                and     fsslt.sal_qty       > 0 -- (gross sales)
 
    group by
        dmo.location_id,
        dmo.location_descr
    
    order by
        dmo.location_id),

-- Getting all the sales for each store in the time Crave has been installed. 
total_sales as(  
select    
        dmo.district_descr,
        dmo.area_descr,
        dmo.location_id,
        dmo.location_descr,
        sum(sal_qty)        all_sales_qty,
        sum(sal_retail_val) all_sales_value

    from 
        published_data.FTT_SAL_SKU_LOC_TRANS                                        fsslt
                        
                        join published_data.dim_product_sku                         dps 
                        on               fsslt.sk_sku_id = dps.sk_sku_id 
                        -- join published_data.dim_time                                dmt    
                        -- on         fsslt.sk_trans_cal_dt = dmt.sk_cal_dt
                        join datetime                                dmt    
                        on         fsslt.sk_trans_cal_dt = dmt.sk_cal_dt
                        join published_data.dim_org                                 dmo           
                        on         fsslt.SK_location_ID = dmo.sk_location_id
                        left join startdates
                        on startdates.location_id = dmo.location_id
                        and startdates.start_date = dmt.cal_dt
    where        
                        fsslt.currency_id   = 'GBP'
                and     fsslt.sal_qty       > 0 -- (gross sales)
                and     dmo.location_id in (22,63,145,336,363,373,403,404,711,712,823,828,829,939,153,253,330,379, 752)
                and dmt.cal_dt >= startdates.start_date -- to make sure that the sales are from after Crave was installed. 
    group by
        dmo.district_descr,
        dmo.area_descr,
        dmo.location_id,
        dmo.location_descr

    order by dmo.location_id
)        

-- Output present all the metrics for each store. Capture rate is calculated within the spreadsheet. 

select
    ts.location_id,
    ts.district_descr,
    ts.area_descr,
    ts.location_descr,
    ts.all_sales_qty,
    ts.all_sales_value,
    vc.number_visits,
    vst.converted_visits,
    vst.ave_units_sale_vis,
    vst.ave_vis_sales_value,
    iff(vc.number_visits = 0,0,vst.converted_visits/vc.number_visits)       pct_visits_to_sale,
    vs.vis_sales_qty,
    vs.vis_sales_value,
    iff(ts.all_sales_qty = 0,0,vs.vis_sales_qty/ts.all_sales_qty)           fr_visit_sales_units_pct,
    iff(ts.all_sales_value = 0,0,vs.vis_sales_value/ts.all_sales_value)     fr_visit_sales_value_pct,
    req_sales_qty,
    req_sales_value,
    iff(ts.all_sales_qty = 0,0,req_sales_qty/ts.all_sales_qty)              fr_request_sales_units_pct,
    iff(ts.all_sales_value = 0,0,req_sales_value/ts.all_sales_value)        fr_request_sales_value_pct
    

from
            total_sales          ts
    
    left join    request_sales        rs
    on      ts.location_id = rs.location_id
    left join    visit_sales        vs
    on      ts.location_id = vs.location_id
    left join    visit_count        vc
    on      ts.location_id = vc.location_id  
    left join    visit_stats        vst
    on      vst.location_id = ts.location_id

group by

    ts.location_id,
    ts.district_descr,
    ts.area_descr,
    ts.location_descr,
    ts.all_sales_qty,
    ts.all_sales_value,
    vc.number_visits,
    vst.converted_visits,
    vst.ave_units_sale_vis,
    vst.ave_vis_sales_value,
    vs.vis_sales_qty,
    vs.vis_sales_value,
    req_sales_qty,
    req_sales_value

order by
    ts.location_id
    ;